package template

import (
	"strconv"
	"github.com/ostcar/bietrunde/model"
)

templ Bieter(state model.ServiceState, bieter model.Bieter, err string, invalidFields map[string]string) {
	@layout("Bietrunde - " + bieter.Name(), true) {
		<h1 class="title is-4">Hallo { bieter.Name() }</h1>
		<p class="block">Deine Bietnummer ist <strong>{ strconv.Itoa(bieter.ID) }</strong>. Merke sie dir gut. Du brauchst sie für die nächste Anmeldung.</p>
		@gebotShow(state,bieter.Gebot, err)
		<p class="block">
			<strong>
				if len(bieter.InvalidFields()) == 0 {
					Bitte drucke vor der Bietrunde den <a href="/vertrag" target="_blank">Vertrag</a> aus und bringe ihn mit!
				} else if state == model.StateRegistration {
					Deine Daten sind nicht valide. <a href="/edit">Bitte passe diese an.</a>
				} else {
					Deine Daten sind nicht valide. Bitte setze dich mit dem Vorstand in Verbindung.
				}
			</strong>
		</p>
		<dl class="block">
			<dt class="has-text-weight-bold">E-Mail:</dt>
			<dd class={ classes("ml-5", errClass(invalidFields["mail"])) }>
				@ddString( bieter.Mail)
			</dd>
			<dt class="has-text-weight-bold">Adresse:</dt>
			<dd class={ classes("ml-5", errClass(invalidFields["adresse"])) }>
				@ddmultilineString(bieter.Adresse)
			</dd>
			<dt class="has-text-weight-bold">Mitglied:</dt>
			<dd class={ classes("ml-5", errClass(invalidFields["mitglied"])) }>
				@jaNein(bieter.Mitglied)
			</dd>
			<dt class="has-text-weight-bold">Verteilstelle:</dt>
			<dd class={ classes("ml-5", errClass(invalidFields["verteilstelle"])) }>
				@ddString(bieter.Verteilstelle.String())
			</dd>
			<dt class="has-text-weight-bold">Teilpartner:</dt>
			<dd class="ml-5">
				@ddString( bieter.Teilpartner)
			</dd>
			<dt class="has-text-weight-bold">IBAN:</dt>
			<dd class={ classes("ml-5", errClass(invalidFields["iban"])) }>
				@ddString( bieter.IBAN)
			</dd>
			<dt class="has-text-weight-bold">Kontoinhaber:</dt>
			<dd class="ml-5">
				@ddString( bieter.ShowKontoinhaber())
			</dd>
			<dt class="has-text-weight-bold">Abbuchung:</dt>
			<dd class="ml-5">
				@abbuchung(bieter.Jaehrlich)
			</dd>
		</dl>
		if state == model.StateRegistration {
			<a href="/edit" class="block button is-primary">Bearbeiten</a>
		}
	}
}

func errClass(s string) string {
	if s == "" {
		return ""
	}
	return "has-text-danger"
}

func classes(class ...string) string {
	var joined string
	for _, c := range class {
		if c == "" {
			continue
		}
		joined += c + " "
	}
	return joined[:len(joined)-1]
}

templ gebotShow(state model.ServiceState, gebot model.Gebot, err string) {
	if state == model.StateOffer || !gebot.Empty() {
		<div class="box">
			<p class="block"><strong>Dein Gebot:</strong> { gebot.String() }</p>
			if state == model.StateOffer {
				@gebotForm(gebot, err)
			}
		</div>
	}
}

templ gebotForm(gebot model.Gebot, err string) {
	<div class="block">
		<p>Bitte gebe dein Gebot ab</p>
		<form action="/" method="post">
			<input type="hidden" name="form" value="gebot"/>
			<div class="field is-grouped">
				<p class="control is-expanded">
					<input
 						name="gebot"
 						class="input"
 						type="number"
 						placeholder="Monatlicher Betrag"
 						value={ gebot.NumberString() }
 						step="0.01"
					/>
				</p>
				<p class="control">
					<button class="button is-info" type="submit">
						if gebot.Empty() {
							Abgeben
						} else {
							Ändern
						}
					</button>
				</p>
			</div>
			if err != "" {
				<p class="help is-danger">{ err }</p>
			}
		</form>
	</div>
}

templ ddString(s string) {
	if s == "" {
		-
	} else {
		{ s }
	}
}

templ ddmultilineString(s string) {
	if s == "" {
		-
	} else {
		<pre>{ s }</pre>
	}
}

templ jaNein(m bool) {
	if m {
		Ja
	} else {
		Nein
	}
}

templ abbuchung(a bool) {
	if a {
		Jährlich
	} else {
		Monatlich
	}
}

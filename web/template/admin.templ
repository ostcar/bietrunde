package template

import (
	"fmt"
	"strconv"
	"github.com/ostcar/bietrunde/model"
)

templ Admin(state model.ServiceState, bieter []model.Bieter) {
	@layout("Admin", true) {
		<h1 class="title is-3">Admin</h1>
		@AdminUserTable(bieter)
		<div hx-ext="sse" sse-connect="/admin/sse" sse-swap="message">
			@AdminButtons(state)
		</div>
		@AdminModalEmpty()
	}
}

templ AdminButtons(state model.ServiceState) {
	<div id="admin-buttons" class="box">
		<div
 			class="button is-primary"
 			hx-post="/admin/new"
 			hx-target="#admin-user-table"
 			hx-swap="outerHTML"
		>
			Bieter Hinzuf√ºgen
		</div>
		<div class="select">
			<select
 				name="state"
 				class="button is-info"
 				hx-post="/admin/state"
 				hx-swap="outerHTML"
 				hx-target="#admin-buttons"
			>
				for _, st := range model.States() {
					<option selected?={ state == st } value={ st.ToAttr() }>{ st.String() }</option>
				}
			</select>
		</div>
		if state == model.StateValidation {
			<div
 				class="button is-danger"
 				hx-delete="/admin/reset-gebot"
 				hx-target="#admin-user-table"
 				hx-swap="outerHTML"
			>
				Neue Bietrunde
			</div>
		}
		if state == model.StateFinish {
			<a
 				class="button is-warning"
 				href="/admin/csv"
			>
				CSV Export
			</a>
		}
	</div>
}

templ AdminUserTable(bieter []model.Bieter) {
	<div id="admin-user-table" hx-get="/admin" hx-trigger="every 2s">
		<table class="table box" style="overflow-x: auto">
			<thead>
				<tr>
					<th title="Anwesend">üê§</th>
					<th>Bietnummer</th>
					<th>Name</th>
					<th>Teilpartner</th>
					<th>Gebot</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				for _, bieter := range bieter {
					<tr
 						if len(bieter.InvalidFields()) != 0 {
							class="has-background-danger-light"
						}
					>
						<td>
							if bieter.Anwesend {
								<button
 									title="Anwesend"
 									class="button is-success is-small"
 									hx-post={ "/admin/abwesend/"+ strconv.Itoa(bieter.ID) }
 									hx-target="#admin-user-table"
 									hx-swap="outerHTML"
								>
									üê£
								</button>
							} else {
								<button
 									title="Abwesend"
 									class="button is-danger is-small"
 									hx-post={ "/admin/anwesend/"+ strconv.Itoa(bieter.ID) }
 									hx-target="#admin-user-table"
 									hx-swap="outerHTML"
								>
									ü•ö
								</button>
							}
						</td>
						<td><a href={ templ.URL(fmt.Sprintf("/?biet-id=%d", bieter.ID)) }>{ strconv.Itoa(bieter.ID) }</a></td>
						<td>{ bieter.Name() }</td>
						<td>
							if bieter.Teilpartner == "" {
								-
							} else {
								{ maxLength(bieter.Teilpartner, 20) }
							}
						</td>
						<td>
							if bieter.Gebot.Empty() {
								-
							} else {
								Ja
							}
						</td>
						<td style="min-width:110px">
							<button
 								title="Bearbeiten"
 								class="button is-warning is-small"
 								hx-get={ "/admin/edit/"+ strconv.Itoa(bieter.ID) }
 								hx-swap="none"
							>‚úé</button>
							<button
 								title="Bieter L√∂schen"
 								class="button is-danger is-small"
 								hx-delete={ "/admin/delete/"+ strconv.Itoa(bieter.ID) }
 								hx-confirm={ bieter.Name() + " wirklich l√∂schen?" }
 								hx-target="#admin-user-table"
 								hx-swap="outerHTML"
							>üóë</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
		<div class="box">
			<ul>
				<li>Es gibt <strong>{ strconv. Itoa(len(bieter )) }</strong> Bieter.</li>
				<li>Davon <strong>{ bieterWithName(bieter) }</strong> mit Namen.</li>
				<li>Anwesend sind <strong>{ bieterAnwesend(bieter) }</strong>.</li>
				<li>Es wurden <strong>{ gebotCount(bieter) }</strong> Gebote abgegeben.</li>
				<li>Das gesamte monatliche Gebot ist <strong>{ gesamtGebot(bieter).String() }</strong>.</li>
				<li>Das gesamte j√§hrliche Gebot ist <strong>{ (gesamtGebot(bieter)*12).String() }</strong>.</li>
				<li>Das durchschnittliche monatliche Gebot liegt bei <strong>{ averageGebot(bieter).String() }</strong>.</li>
			</ul>
		</div>
	</div>
}

func maxLength(str string, l int) string {
	if l < 4 {
		l = 4
	}

	if len(str) <= l {
		return str
	}
	return str[:l-3] + "..."
}

templ AdminBieterEdit(bieter model.Bieter, fieldErrors map[string]string) {
	@adminModalForm(bieter.Name(), "/admin/edit/"+ strconv.Itoa(bieter.ID)) {
		@bieterEditFormFields(bieter, fieldErrors)
	}
}

templ AdminError(msg string) {
	@adminModalMessage("Fehler", true) {
		{ msg }
	}
}

templ AdminModalEmpty() {
	@adminModalMessage("Hinweis", false) {
	}
}

templ adminModalInner(title string, ) {
	<header class="modal-card-head">
		<p id="modal-title" class="modal-card-title">{ title }</p>
		<button class="delete" aria-label="close" _={ adminModalClose() }></button>
	</header>
	<section class="modal-card-body">
		{ children... }
	</section>
}

templ adminModalOuter(active bool) {
	<div
 		id="admin-modal"
 		hx-swap-oob="true"
 		if active {
			class="modal is-active"
		} else {
			class="modal"
		}
	>
		<div class="modal-background"></div>
		{ children... }
	</div>
}

templ adminModalMessage(title string, show bool) {
	@adminModalOuter(show) {
		<div class="modal-card">
			@adminModalInner(title) {
				<div id="modal-msg">
					{ children... }
				</div>
			}
			<footer class="modal-card-foot">
				<button
 					class="button"
 					type="button"
 					_={ adminModalClose() }
				>
					Ok
				</button>
			</footer>
		</div>
	}
}

templ adminModalForm(title string, submitURL string) {
	@adminModalOuter(true) {
		<form
 			hx-post={ submitURL }
 			hx-target="#admin-user-table"
 			hx-swap="outerHTML"
		>
			<div class="modal-card">
				@adminModalInner(title) {
					{ children... }
				}
				<footer class="modal-card-foot">
					<button class="button is-success" type="submit">Speichern</button>
					<button
 						class="button"
 						type="button"
 						_={ adminModalClose() }
					>
						Abbrechen
					</button>
				</footer>
			</div>
		</form>
	}
}

func adminModalClose() string {
	return `on click remove .is-active from #admin-modal`
}

templ AdminLogin(err string) {
	@layout("Admin", false) {
		<h1 class="title is-3">Admin Login</h1>
		<form action="/admin" method="post">
			<div class="field">
				<label class="label">Passwort:</label>
				<div class="control">
					<input name="password" class="input" type="password" _="on load call me.focus()"/>
				</div>
			</div>
			if err != "" {
				<p class="help is-danger">{ err }</p>
			}
			<div class="control">
				<button class="button is-primary" type="submit">Anmelden</button>
			</div>
		</form>
	}
}

func bieterWithName(bieter []model.Bieter) string {
	var count int
	for _, b := range bieter {
		if b.Name() != "" {
			count++
		}
	}
	return strconv.Itoa(count)
}

func bieterAnwesend(bieter []model.Bieter) string {
	var count int
	for _, b := range bieter {
		if b.Anwesend {
			count++
		}
	}
	return strconv.Itoa(count)
}

func gesamtGebot(bieter []model.Bieter) model.Gebot {
	var count model.Gebot
	for _, b := range bieter {
		count += b.Gebot
	}
	return count
}

func averageGebot(bieter []model.Bieter) model.Gebot {
	var gebotSum model.Gebot
	var gebotCount int
	for _, b := range bieter {
		if b.Gebot.Empty() {
			continue
		}
		gebotSum += b.Gebot
		gebotCount++
	}

	if gebotCount == 0 {
		return 0
	}

	return gebotSum / model.Gebot(gebotCount)
}

func gebotCount(bieter []model.Bieter) string {
	var gebotCount int
	for _, b := range bieter {
		if !b.Gebot.Empty() {
			gebotCount++
		}
	}
	return strconv.Itoa(gebotCount)
}
